<?xml version="1.0"?>
<robot name="my_robot" xmlns:xacro="http://wwwiros.org/wiki/xacro">

    #base values
    <xacro:property name="base_length" value="0.6" /> #added
    <xacro:property name="base_width" value="0.4" /> #added
    <xacro:property name="base_height" value="0.2" /> #added
    
    #wheel values
    <xacro:property name="wheel_radius" value="0.1" /> #added
    <xacro:property name="wheel_length" value="0.05" /> #added

    #inertia matrix of box
    <xacro:macro name="box_inertia" params="mass lx ly lz xyz rpy">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}" />
            <mass value="${mass}" />
            <inertia ixx="${(mass / 12.0) * (ly * ly + lz * lz)}" ixy="0" ixz="0"
                     iyy="${(mass / 12.0) * (lx * lx + lz * lz)}" iyz="0"
                     izz="${(mass / 12.0) * (lx * lx + ly * ly)}" /> #in directions is ixx
        </inertial>
    </xacro:macro>
    
    # height = ly width = lx depth = lz
    #Inertia matrix of cylinder
    <xacro:macro name="cylinder_inertia" params="mass xyz rpy radius height">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}" />
            <mass value="${mass}" />
            <radius value="${radius}" />
            <height value="${height}" />
            <inertia ixx="${(mass / 12.0) * (3 * (radius * radius) + height * height)}" ixy="0" ixz="0"
                     iyy="${(mass / 12.0) * (3 * (radius * radius) + height * height)}" iyz="0"
                     izz="${(mass / 2.0) * (radius * radius)}" />
        </inertial>
    </xacro:macro>

    #Intertia matrix of sphere
    <xacro:macro name="sphere_inertia" params="mass xyz rpy radius">
        <inertial>
            <origin xyz="${xyz}" rpy="${rpy}" />
            <mass value="${mass}" />
            <radius value="${radius}" />
            <inertia ixx="${(mass * 2 / 5) * (radius * radius)}" ixy="0" ixz="0"
                     iyy="${(mass * 2 / 5) * (radius * radius)}" iyz="0"
                     izz="${(mass * 2 / 5) * (radius * radius)}" />
        </inertial>
    </xacro:macro>
    
    <material name="green">
        <color rgba="0 0.6 0 1"/>
    </material>
    
    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>
    
    <material name="gray">
        <color rgba="0.7 0.7 0.7 0.7"/>
    </material>
   
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" /> #"0 0 0.1"
            <material name="green"/>
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
        </collision>
        <xacro:box_inertia mass="5.0" lx="${base_length}" ly="${base_width}" lz="${base_height}" xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
    </link>
    
    <link name="base_footprint" />
    
    <link name="lidar">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="white"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <xacro:cylinder_inertia mass="1.0" radius="0.1" height="${wheel_length}" xyz="0 0 0" rpy="0 0 0" />
     </link>

    <link name="left_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 ${wheel_length / 2.0}" rpy="0 0 0" />
            <material name="gray"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 ${wheel_length / 2.0}" rpy="0 0 0" />
        </collision>
        <xacro:cylinder_inertia mass="1.0" xyz="0 0 0" rpy="0 0 0" height="${wheel_length}" radius="${wheel_radius}" />
    </link>    
    
    <link name="right_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 ${wheel_length / 2.0}" rpy="0 0 0" />
            <material name="gray"/>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 ${wheel_length / 2.0}" rpy="0 0 0" />
        </collision>
        <xacro:cylinder_inertia mass="1.0" radius="${wheel_radius}" height="${wheel_length}" xyz="0 0 0" rpy="0 0 0" />
    </link>       
    
    <link name="caster_wheel">
        <visual>
            <geometry>
                <sphere radius="${wheel_radius - wheel_length}" /> # 0.05
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="gray" />
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius - wheel_length}" /> # 0.05
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <xacro:sphere_inertia mass="2.0" radius="${wheel_radius - wheel_length}" xyz="0 0 0" rpy="0 0 0" />
    </link>
    
     
    <joint name="base_lidar_joint" type="fixed">
         <parent link="base_link"/>
         <child link="lidar"/>
         <origin xyz="${base_length - 0.45} 0 ${base_height + (wheel_length/2)}" rpy="0 0 0"/> #"0.15 0 0.225"
    </joint>
    
    <joint name="base_left_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="left_wheel"/>
        <origin xyz="${base_length - 0.75} ${base_height} 0" rpy="${-pi / 2.0} 0 0"/> #"-0.15 0.2 0"
        <axis xyz="0 0 ${base_width + base_length}"/>
    </joint>
    
    <joint name="base_right_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="right_wheel"/>
        <origin xyz="${base_length - 0.75} ${-base_height - wheel_length} 0" rpy="${-pi / 2.0} 0 0"/> #"-0.15 -0.2 0"
        <axis xyz="0 0 ${base_width + base_length}"/>
    </joint>    

    <joint name="base_caster_wheel_joint" type="fixed">
        <parent link="base_link"/>
        <child link="caster_wheel"/>
        <origin xyz="${base_length - 0.4} 0 ${wheel_radius - 3*wheel_length}" rpy="0 0 0" /> #"0.2 0 -0.05"
    </joint>

   <joint name="base_joint" type="fixed">
       <parent link="base_footprint"/>
       <child link="base_link"/>
       <origin xyz="0 0 0.1" rpy="0 0 0" />
   </joint>

###GAZEBO###

    <gazebo reference="base_link">
        <material>Gazebo/Green</material>
    </gazebo>
    
    <gazebo reference="lidar">
        <material>Gazebo/White</material>
    </gazebo>
    
    <gazebo reference="left_wheel">
        <material>Gazebo/Gray</material>
    </gazebo>
    
    <gazebo reference="right_wheel">
        <material>Gazebo/Gray</material>
    </gazebo>
    
    <gazebo reference="caster_wheel">
        <material>Gazebo/Gray</material>
    </gazebo>

    
    <gazebo>
        <plugin name="diff_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <!-- Update rate in Hz -->
            <update_rate>50</update_rate>
 
            <!-- wheels -->
            <left_joint>base_left_wheel_joint</left_joint>
            <right_joint>base_right_wheel_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.4</wheel_separation>
            <wheel_diameter>0.2</wheel_diameter>
  
            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>          
            <publish_wheel_tf>true</publish_wheel_tf> 
            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>
  
            <!-- input -->
            <command_topic>cmd_vel</command_topic>

        </plugin>
    </gazebo>
    

</robot>
